//CONTEST : Mail.Ru Cup 2018 Round 3
//PROBLEM : D. Decorate Apple Tree
//PROBLEM LINK : https://codeforces.com/contest/1056/problem/D

//Shinchan Loves Coding :))
#include<bits/stdc++.h>
#include<map>
#include<set>

using namespace std;

#define night_rider ios::sync_with_stdio(false);cin.tie(NULL);

#define double long double
#define int long long int
#define en "\n"
#define fi first
#define se second
#define PB push_back
#define all(v) v.begin(),v.end()
#define allr(v) v.rbegin(),v.rend()
#define rep(i,x,y) for(int i=x ; i<y ; i++)
#define erep(i,x,y) for(int i=x ; i<=y ; i++)
#define erepr(i,x,y) for(int i=x ; i>=y ; i--)
#define repr(i,x,y) for(int i=x ; i>y ; i--)
typedef vector<int> vi;
typedef vector<vector<int>> vii;
typedef pair<int,int> pi;
typedef vector<pair<int,int>> pii;
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

const int no=1e6+5,modulo=1e9+7,inf=1e18,N=3e3+1;
int ar[no],br[no],mat[N][N];
int ans=0,used[no];
vi adj[no];
//LOWER_BOUND(n) - FIRST ELEMENT GREATER THAN EQUAL TO n
//UPPER_BOUND(n) - FIRST ELEMENT GREATER THAN n

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
vi v;
int dfs(int node) {
    used[node]=1;
    int x=0;
    if(adj[node].size()==1 && used[adj[node][0]]) x=1;
    for(int child : adj[node]) {
        if(!used[child]) x+=dfs(child);
    }
    v.PB(x);
    return x;
}

void solve () {
    int n=0,m=0,b=0,c=0,x=0,y=0,z=0,w=0,k=0;
    cin>>n;
    rep(i,2,n+1) {
        cin>>x;
        adj[i].PB(x);
        adj[x].PB(i);
    }
    if(n==1) {
        cout<<1;
        return ;
    }
    dfs(1);
    sort(all(v));
    for(int i : v) cout<<i<<" ";
}

inline void runn(){
	#ifndef ONLINE JUDGE
	freopen("input.txt","r",stdin);
	freopen("output.txt","w",stdout);
	#endif
}

signed main()
{
	night_rider
	//runn();
	int t=1;
	//cin>>t;
	rep(i,1,t+1) {
        // cout << "Case #" << i << ": ";
        solve();
    }
}
